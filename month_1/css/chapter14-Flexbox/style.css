* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

body {
  font-family: system-ui, -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto,
    Oxygen, Ubuntu, Cantarell, "Open Sans", "Helvetica Neue", sans-serif;
  min-height: 100vh;
  padding: 20px;
}

.container {
  max-width: 800px;
  min-height: 400px;
  margin-inline: auto;
  border: 1px solid #000;
  display: flex; /*default alignment is usally flex start*/
  justify-content: center; /*align horizontally*/
  gap: 1rem;
  align-items: center; /*align vertically*/
  /* flex-direction: row-reverse; /*row by defualt
    flex-wrap: wrap; fixes overflow 
    
    short hand for these two
    */

    flex-direction: row-reverse;
  /*remove the wrap to bascially see what flex-shrink does for us.*/
  flex-flow: row wrap;
  align-content: space-evenly; /*this aligns the rows, it will take values like justif content t=but it will align the rowa*/
}

/*Indiviual Flex Items. */

.box {
  /* min-width: 100px; */
  height: 100px; /*had to change this from min-height to height to implement the vertical property of flex*/
  background-color: #000;
  color: white;
  font-size: 2em;
  padding: 0.5rem;
  /*all or numbers are in the middle of this box*/
  display: flex;
  justify-content: center;
  align-items: center;

  /*There are still flex items inside of the larger flex container.*/
  /*  flex-basis: 40%; it is essentially giving it a minimum width (it's not the same with min-width)*/
  /*flex-grow: 1; unitless value, they grow as much as to fill up the container.*/
  /* flex-shrink: 1; */

  /*Short hand
  flex: grow shrink basis;
*/
  flex: 1 1 250px;
}

.box:nth-child(2) {
  /*each elements get their 100px what is left, the on that has 2 is going to get twice as much of that extra space.*/
  /* flex-grow: 2; */

  /*Basically the same princple with flex grow. */
  /* flex-shrink: 2; */
  flex: 2 2 250px;
  /*if you are using this order property on indiviual elements and you have row reverse on*/
  /*
  more research on this order property.
  
  Sometimes reversing the row or column order of a container is not enough. 
  In these cases, we can apply the order property to individual items. 
  By default, items have a value of 0, 
  but we can use this property to also set it to a positive or negative integer value (-2, -1, 0, 1, 2).
*/
  order: -1;
}
